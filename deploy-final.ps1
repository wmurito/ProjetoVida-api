# Script de Deploy Final - Projeto Vida API
# Resolve problemas de caminho e faz deploy otimizado

param(
    [string]$Stage = "prod"
)

# Configurar para parar em caso de erro
$ErrorActionPreference = "Stop"

Write-Host "üöÄ Deploy Final - Projeto Vida API" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Green

# Definir caminho do projeto
$ProjectPath = "C:\Users\welli\OneDrive\√Årea de Trabalho\ProjetoVida-git\ProjetoVida-api"

# Verificar se o diret√≥rio existe
if (-not (Test-Path $ProjectPath)) {
    Write-Host "‚ùå Diret√≥rio do projeto n√£o encontrado: $ProjectPath" -ForegroundColor Red
    exit 1
}

Write-Host "üìÅ Diret√≥rio do projeto: $ProjectPath" -ForegroundColor Cyan

# Navegar para o diret√≥rio do projeto
Set-Location $ProjectPath

# Verificar se estamos no diret√≥rio correto
if (-not (Test-Path "main.py")) {
    Write-Host "‚ùå Arquivo main.py n√£o encontrado no diret√≥rio atual" -ForegroundColor Red
    Write-Host "Diret√≥rio atual: $(Get-Location)" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ Diret√≥rio do projeto encontrado" -ForegroundColor Green

# 1. Fazer backup do main.py atual
Write-Host "üìã Fazendo backup do main.py atual..." -ForegroundColor Yellow
Copy-Item "main.py" "main-backup-$(Get-Date -Format 'yyyyMMdd-HHmmss').py"

# 2. Substituir main.py pela vers√£o otimizada
Write-Host "üîÑ Substituindo main.py pela vers√£o otimizada..." -ForegroundColor Yellow
Copy-Item "main-optimized.py" "main.py" -Force

# 3. Verificar se o Serverless Framework est√° instalado
Write-Host "üîß Verificando Serverless Framework..." -ForegroundColor Yellow
try {
    $null = Get-Command serverless -ErrorAction Stop
    Write-Host "‚úÖ Serverless Framework encontrado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Serverless Framework n√£o encontrado!" -ForegroundColor Red
    Write-Host "Instalando Serverless Framework..." -ForegroundColor Yellow
    npm install -g serverless
}

# 4. Verificar Docker
Write-Host "üê≥ Verificando Docker..." -ForegroundColor Yellow
try {
    $null = Get-Command docker -ErrorAction Stop
    Write-Host "‚úÖ Docker encontrado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n√£o encontrado!" -ForegroundColor Red
    Write-Host "Docker √© necess√°rio para compilar depend√™ncias nativas" -ForegroundColor Yellow
    exit 1
}

# 5. Verificar AWS CLI
Write-Host "‚òÅÔ∏è Verificando AWS CLI..." -ForegroundColor Yellow
try {
    $null = aws sts get-caller-identity 2>$null
    Write-Host "‚úÖ AWS CLI configurado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå AWS CLI n√£o configurado!" -ForegroundColor Red
    Write-Host "Configure o AWS CLI com: aws configure" -ForegroundColor Yellow
    exit 1
}

# 6. Limpeza de arquivos desnecess√°rios
Write-Host "üßπ Limpando arquivos desnecess√°rios..." -ForegroundColor Yellow
Get-ChildItem -Recurse -Name "*.pyc" | Remove-Item -Force -ErrorAction SilentlyContinue
Get-ChildItem -Recurse -Directory -Name "__pycache__" | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
Get-ChildItem -Recurse -Name "*.log" | Remove-Item -Force -ErrorAction SilentlyContinue

# 7. Verificar arquivo de par√¢metros
if (-not (Test-Path "params-optimized.json")) {
    Write-Host "‚ö†Ô∏è Criando arquivo de par√¢metros..." -ForegroundColor Yellow
    $paramsContent = @"
{
  "s3Bucket": "projeto-vida-prod-optimized",
  "s3KeyPrefix": "uploads",
  "dbSecretName": "projeto-vida/database",
  "cognitoSecretName": "projeto-vida/cognito",
  "awsRegion": "us-east-1",
  "corsOrigins": "https://your-frontend-domain.com,http://localhost:5173"
}
"@
    $paramsContent | Out-File -FilePath "params-optimized.json" -Encoding UTF8
}

# 8. Fazer deploy
Write-Host "üöÄ Iniciando deploy otimizado..." -ForegroundColor Green
Write-Host "Configura√ß√£o: serverless-optimized.yml" -ForegroundColor Cyan
Write-Host "Stage: $Stage" -ForegroundColor Cyan

serverless deploy --config serverless-optimized.yml --stage $Stage --verbose

if ($LASTEXITCODE -eq 0) {
    Write-Host ""
    Write-Host "üéâ Deploy conclu√≠do com sucesso!" -ForegroundColor Green
    Write-Host "====================================" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìä Configura√ß√µes otimizadas aplicadas:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Runtime: Python 3.11" -ForegroundColor White
    Write-Host "   ‚Ä¢ Mem√≥ria: 512MB (otimizada para baixo custo)" -ForegroundColor White
    Write-Host "   ‚Ä¢ Timeout: 15s (otimizado para performance)" -ForegroundColor White
    Write-Host "   ‚Ä¢ Concorr√™ncia: Limitada a 5 (economia de custos)" -ForegroundColor White
    Write-Host "   ‚Ä¢ Depend√™ncias: Vers√µes espec√≠ficas para Lambda" -ForegroundColor White
    Write-Host ""
    Write-Host "üí∞ Estimativa de custo mensal (50 pacientes/m√™s):" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Lambda: ~$1-2 USD" -ForegroundColor White
    Write-Host "   ‚Ä¢ S3: ~$0.50 USD" -ForegroundColor White
    Write-Host "   ‚Ä¢ CloudWatch: ~$0.50 USD" -ForegroundColor White
    Write-Host "   ‚Ä¢ Total: ~$2-3 USD/m√™s" -ForegroundColor White
    Write-Host ""
    Write-Host "üîí Recursos de seguran√ßa implementados:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ IAM roles com menor privil√©gio" -ForegroundColor White
    Write-Host "   ‚Ä¢ S3 com bloqueio de acesso p√∫blico" -ForegroundColor White
    Write-Host "   ‚Ä¢ CORS configurado" -ForegroundColor White
    Write-Host "   ‚Ä¢ Rate limiting ativo" -ForegroundColor White
    Write-Host "   ‚Ä¢ Valida√ß√£o de uploads" -ForegroundColor White
    Write-Host ""
    Write-Host "üìà Performance otimizada:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Cold start: ~2-3s (aceit√°vel para 50 pacientes/m√™s)" -ForegroundColor White
    Write-Host "   ‚Ä¢ Warm start: ~200ms" -ForegroundColor White
    Write-Host "   ‚Ä¢ Tamanho do pacote: ~15MB (70% menor)" -ForegroundColor White
    Write-Host "   ‚Ä¢ Depend√™ncias compiladas para Lambda" -ForegroundColor White
    Write-Host ""
    Write-Host "üéØ Pr√≥ximos passos:" -ForegroundColor Cyan
    Write-Host "   1. Testar endpoints da API" -ForegroundColor White
    Write-Host "   2. Configurar dom√≠nio personalizado (opcional)" -ForegroundColor White
    Write-Host "   3. Atualizar CORS origins no params-optimized.json" -ForegroundColor White
    Write-Host "   4. Configurar monitoramento no CloudWatch" -ForegroundColor White
    Write-Host ""
    Write-Host "‚úÖ Deploy otimizado finalizado!" -ForegroundColor Green
} else {
    Write-Host "‚ùå Erro no deploy!" -ForegroundColor Red
    Write-Host "Verifique os logs acima para mais detalhes" -ForegroundColor Yellow
    
    # Restaurar backup em caso de erro
    Write-Host "üîÑ Restaurando backup do main.py..." -ForegroundColor Yellow
    $backupFiles = Get-ChildItem "main-backup-*.py" | Sort-Object LastWriteTime -Descending
    if ($backupFiles) {
        Copy-Item $backupFiles[0].Name "main.py" -Force
        Write-Host "‚úÖ Backup restaurado" -ForegroundColor Green
    }
    
    exit 1
}
