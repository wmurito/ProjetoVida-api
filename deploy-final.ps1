# Script para deploy final com CORS corrigido
Write-Host "üöÄ Deploy Final - CORS Corrigido" -ForegroundColor Green
Write-Host "=================================" -ForegroundColor Green

# Verificar se estamos no diret√≥rio correto
if (-not (Test-Path "serverless.yml")) {
    Write-Host "‚ùå Execute este script no diret√≥rio ProjetoVida-api" -ForegroundColor Red
    Write-Host "üìÅ Diret√≥rio atual: $(Get-Location)" -ForegroundColor Yellow
    Write-Host "üìÅ Conte√∫do do diret√≥rio:" -ForegroundColor Yellow
    Get-ChildItem | Select-Object Name, Mode | Format-Table
    exit 1
}

Write-Host "‚úÖ Diret√≥rio correto encontrado" -ForegroundColor Green
Write-Host "üìã Configura√ß√µes aplicadas:" -ForegroundColor Cyan
Write-Host "   - Handler OPTIONS removido do main.py" -ForegroundColor White
Write-Host "   - CORS configurado no serverless.yml" -ForegroundColor White
Write-Host "   - Origem permitida: https://master.d1yi28nqqe44f2.amplifyapp.com" -ForegroundColor White

Write-Host "`nüì¶ Iniciando deploy for√ßado..." -ForegroundColor Yellow
Write-Host "‚è≥ Isso pode levar alguns minutos..." -ForegroundColor Yellow

# Fazer deploy for√ßado
try {
    $deployResult = serverless deploy --stage prod --force 2>&1
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "`n‚úÖ Deploy conclu√≠do com sucesso!" -ForegroundColor Green
        
        # Obter informa√ß√µes da API
        Write-Host "`nüìã Informa√ß√µes da API:" -ForegroundColor Cyan
        serverless info --stage prod
        
        Write-Host "`nüéØ CORS Configurado:" -ForegroundColor Green
        Write-Host "   - API Gateway HTTP API gerencia CORS automaticamente" -ForegroundColor White
        Write-Host "   - Requisi√ß√µes OPTIONS n√£o chegam ao Lambda" -ForegroundColor White
        Write-Host "   - Headers CORS retornados pelo API Gateway" -ForegroundColor White
        
        Write-Host "`nüß™ Testando CORS..." -ForegroundColor Yellow
        
        # Teste simples de CORS
        $testUrl = "https://80alai4x6c.execute-api.us-east-1.amazonaws.com/dashboard/estadiamento"
        $origin = "https://master.d1yi28nqqe44f2.amplifyapp.com"
        
        try {
            Write-Host "Testando OPTIONS request..." -ForegroundColor White
            $response = Invoke-WebRequest -Uri $testUrl -Method OPTIONS -Headers @{
                "Origin" = $origin
                "Access-Control-Request-Method" = "GET"
                "Access-Control-Request-Headers" = "authorization,content-type"
            } -UseBasicParsing -TimeoutSec 10
            
            Write-Host "‚úÖ Status: $($response.StatusCode)" -ForegroundColor Green
            
            # Verificar headers CORS
            $corsHeaders = $response.Headers | Where-Object { $_.Key -like "*access-control*" }
            if ($corsHeaders) {
                Write-Host "‚úÖ Headers CORS encontrados:" -ForegroundColor Green
                foreach ($header in $corsHeaders) {
                    Write-Host "   $($header.Key): $($header.Value)" -ForegroundColor White
                }
            } else {
                Write-Host "‚ö†Ô∏è Headers CORS n√£o encontrados" -ForegroundColor Yellow
            }
            
        } catch {
            Write-Host "‚ùå Erro ao testar CORS: $($_.Exception.Message)" -ForegroundColor Red
        }
        
        Write-Host "`nüìù PR√ìXIMOS PASSOS:" -ForegroundColor Yellow
        Write-Host "1. ‚úÖ API deployada com CORS corrigido" -ForegroundColor Green
        Write-Host "2. üîÑ Recarregue sua aplica√ß√£o no Amplify" -ForegroundColor White
        Write-Host "3. üß™ Teste as funcionalidades do dashboard" -ForegroundColor White
        Write-Host "4. üìä Verifique se os erros de CORS desapareceram" -ForegroundColor White
        
        Write-Host "`nüéØ RESULTADO ESPERADO:" -ForegroundColor Cyan
        Write-Host "   - ‚úÖ Requisi√ß√µes OPTIONS retornam 200 OK" -ForegroundColor Green
        Write-Host "   - ‚úÖ Headers Access-Control-Allow-Origin presentes" -ForegroundColor Green
        Write-Host "   - ‚úÖ Frontend consegue fazer requisi√ß√µes sem erro CORS" -ForegroundColor Green
        
    } else {
        Write-Host "`n‚ùå Erro no deploy:" -ForegroundColor Red
        Write-Host $deployResult -ForegroundColor Red
        
        Write-Host "`nüí° Dicas para resolver:" -ForegroundColor Yellow
        Write-Host "   - Verifique se as credenciais AWS est√£o configuradas" -ForegroundColor White
        Write-Host "   - Verifique se tem permiss√µes para deploy no AWS" -ForegroundColor White
        Write-Host "   - Verifique se a regi√£o us-east-1 est√° correta" -ForegroundColor White
    }
} catch {
    Write-Host "`n‚ùå Erro durante o deploy: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüìã Para testar manualmente:" -ForegroundColor Yellow
Write-Host "curl -X OPTIONS https://80alai4x6c.execute-api.us-east-1.amazonaws.com/dashboard/estadiamento \`" -ForegroundColor White
Write-Host "  -H 'Origin: https://master.d1yi28nqqe44f2.amplifyapp.com' \`" -ForegroundColor White
Write-Host "  -H 'Access-Control-Request-Method: GET' \`" -ForegroundColor White
Write-Host "  -H 'Access-Control-Request-Headers: authorization,content-type' \`" -ForegroundColor White
Write-Host "  -v" -ForegroundColor White
