# üöÄ Script de Deploy para AWS Lambda - Projeto Vida (PowerShell)
# Deploy otimizado excluindo arquivos desnecess√°rios

param(
    [string]$Stage = "prod",
    [switch]$SkipDependencies = $false
)

# Configurar para parar em caso de erro
$ErrorActionPreference = "Stop"

Write-Host "üöÄ Iniciando deploy da API para AWS Lambda..." -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green

# Verificar se o Serverless Framework est√° instalado
try {
    $null = Get-Command serverless -ErrorAction Stop
    Write-Host "‚úÖ Serverless Framework encontrado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Serverless Framework n√£o encontrado!" -ForegroundColor Red
    Write-Host "üì¶ Instalando Serverless Framework..." -ForegroundColor Yellow
    npm install -g serverless
}

# Verificar se as depend√™ncias Python est√£o instaladas
if (-not $SkipDependencies) {
    Write-Host "üì¶ Verificando depend√™ncias Python..." -ForegroundColor Yellow
    
    if (-not (Test-Path "venv")) {
        Write-Host "üîß Criando ambiente virtual..." -ForegroundColor Yellow
        python -m venv venv
    }
    
    Write-Host "üîß Ativando ambiente virtual..." -ForegroundColor Yellow
    & "venv\Scripts\Activate.ps1"
    
    Write-Host "üì¶ Instalando depend√™ncias..." -ForegroundColor Yellow
    pip install -r requirements.txt
}

# Verificar se o AWS CLI est√° configurado
Write-Host "üîç Verificando configura√ß√£o AWS..." -ForegroundColor Yellow
try {
    $null = aws sts get-caller-identity 2>$null
    Write-Host "‚úÖ AWS CLI configurado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå AWS CLI n√£o configurado!" -ForegroundColor Red
    Write-Host "üîß Configure o AWS CLI com: aws configure" -ForegroundColor Yellow
    exit 1
}

# Limpar arquivos desnecess√°rios antes do deploy
Write-Host "üßπ Limpando arquivos desnecess√°rios..." -ForegroundColor Yellow

# Remover arquivos Python compilados
Get-ChildItem -Recurse -Name "*.pyc" | Remove-Item -Force -ErrorAction SilentlyContinue
Get-ChildItem -Recurse -Directory -Name "__pycache__" | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
Get-ChildItem -Recurse -Name "*.log" | Remove-Item -Force -ErrorAction SilentlyContinue
Get-ChildItem -Recurse -Name ".DS_Store" | Remove-Item -Force -ErrorAction SilentlyContinue

# Verificar se existe arquivo de par√¢metros
if (-not (Test-Path "params.json")) {
    Write-Host "‚ö†Ô∏è  Arquivo params.json n√£o encontrado!" -ForegroundColor Yellow
    Write-Host "üìù Criando arquivo de par√¢metros padr√£o..." -ForegroundColor Yellow
    
    $paramsContent = @"
{
  "s3Bucket": "projeto-vida-prd",
  "s3KeyPrefix": "dashboard_files",
  "dbSecretName": "projeto-vida/database",
  "cognitoSecretName": "projeto-vida/cognito",
  "awsRegion": "us-east-1"
}
"@
    
    $paramsContent | Out-File -FilePath "params.json" -Encoding UTF8
    Write-Host "‚úÖ Arquivo params.json criado com valores padr√£o" -ForegroundColor Green
    Write-Host "üîß Ajuste os valores conforme necess√°rio antes do deploy" -ForegroundColor Yellow
}

# Fazer deploy usando o arquivo de produ√ß√£o
Write-Host "üöÄ Fazendo deploy para produ√ß√£o..." -ForegroundColor Green
serverless deploy --config serverless-prod.yml --stage $Stage --verbose

Write-Host ""
Write-Host "üéâ Deploy conclu√≠do com sucesso!" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green
Write-Host "üìä Informa√ß√µes do deploy:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Stage: $Stage" -ForegroundColor White
Write-Host "   ‚Ä¢ Runtime: Python 3.11" -ForegroundColor White
Write-Host "   ‚Ä¢ Memory: 1024MB" -ForegroundColor White
Write-Host "   ‚Ä¢ Timeout: 30s" -ForegroundColor White
Write-Host "   ‚Ä¢ Arquivos exclu√≠dos: Documenta√ß√£o, testes, debug" -ForegroundColor White
Write-Host ""
Write-Host "üîó Endpoints dispon√≠veis:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ API: https://[seu-dominio]/" -ForegroundColor White
Write-Host "   ‚Ä¢ Teste: https://[seu-dominio]/test" -ForegroundColor White
Write-Host ""
Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "   1. Testar os endpoints" -ForegroundColor White
Write-Host "   2. Configurar dom√≠nio personalizado (opcional)" -ForegroundColor White
Write-Host "   3. Configurar monitoramento" -ForegroundColor White
Write-Host ""
Write-Host "‚úÖ Deploy finalizado!" -ForegroundColor Green
