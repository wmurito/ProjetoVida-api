#!/usr/bin/env python3
"""
üß™ Teste de Seguran√ßa - Sistema de Upload via QR Code
Script para testar as corre√ß√µes de seguran√ßa implementadas
"""

import requests
import json
import time
import base64

# Configura√ß√£o
BASE_URL = "http://localhost:8000"  # Ajustar conforme necess√°rio

def test_secure_upload():
    """Testa o sistema de upload seguro"""
    print("üîí Testando Sistema de Upload Seguro")
    print("=" * 50)
    
    # Teste 1: Criar sess√£o
    print("\n1. Testando cria√ß√£o de sess√£o...")
    try:
        response = requests.post(f"{BASE_URL}/create-upload-session")
        if response.status_code == 200:
            session_data = response.json()
            session_id = session_data["session_id"]
            print(f"‚úÖ Sess√£o criada: {session_id[:8]}...")
        else:
            print(f"‚ùå Falha ao criar sess√£o: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Erro ao criar sess√£o: {e}")
        return
    
    # Teste 2: Upload v√°lido
    print("\n2. Testando upload v√°lido...")
    valid_file_data = {
        "fileName": "test.pdf",
        "fileType": "application/pdf",
        "fileData": "data:application/pdf;base64,dGVzdA=="  # "test" em base64
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/upload-mobile/{session_id}",
            json=valid_file_data
        )
        if response.status_code == 200:
            print("‚úÖ Upload v√°lido aceito")
        else:
            print(f"‚ùå Upload v√°lido rejeitado: {response.status_code}")
            print(f"Resposta: {response.text}")
    except Exception as e:
        print(f"‚ùå Erro no upload v√°lido: {e}")
    
    # Teste 3: Upload com nome perigoso
    print("\n3. Testando upload com nome perigoso...")
    malicious_file_data = {
        "fileName": "../../../etc/passwd",
        "fileType": "application/pdf",
        "fileData": "data:application/pdf;base64,dGVzdA=="
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/upload-mobile/{session_id}",
            json=malicious_file_data
        )
        if response.status_code == 422:
            print("‚úÖ Upload com nome perigoso bloqueado")
        else:
            print(f"‚ùå Upload com nome perigoso aceito: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro no teste de nome perigoso: {e}")
    
    # Teste 4: Upload com tipo inv√°lido
    print("\n4. Testando upload com tipo inv√°lido...")
    invalid_type_data = {
        "fileName": "test.exe",
        "fileType": "application/x-executable",
        "fileData": "data:application/x-executable;base64,dGVzdA=="
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/upload-mobile/{session_id}",
            json=invalid_type_data
        )
        if response.status_code == 422:
            print("‚úÖ Upload com tipo inv√°lido bloqueado")
        else:
            print(f"‚ùå Upload com tipo inv√°lido aceito: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro no teste de tipo inv√°lido: {e}")
    
    # Teste 5: Upload com arquivo muito grande
    print("\n5. Testando upload com arquivo muito grande...")
    large_file_data = {
        "fileName": "large.pdf",
        "fileType": "application/pdf",
        "fileData": "data:application/pdf;base64," + "A" * 10000000  # 10MB
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/upload-mobile/{session_id}",
            json=large_file_data
        )
        if response.status_code == 422:
            print("‚úÖ Upload com arquivo grande bloqueado")
        else:
            print(f"‚ùå Upload com arquivo grande aceito: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro no teste de arquivo grande: {e}")
    
    # Teste 6: Rate limiting
    print("\n6. Testando rate limiting...")
    rate_limit_count = 0
    for i in range(10):  # Tentar 10 uploads rapidamente
        try:
            response = requests.post(
                f"{BASE_URL}/upload-mobile/{session_id}",
                json=valid_file_data
            )
            if response.status_code == 429:
                rate_limit_count += 1
        except Exception as e:
            print(f"Erro no teste de rate limiting: {e}")
    
    if rate_limit_count > 0:
        print(f"‚úÖ Rate limiting funcionando ({rate_limit_count} bloqueios)")
    else:
        print("‚ö†Ô∏è Rate limiting n√£o detectado")
    
    # Teste 7: Sess√£o inv√°lida
    print("\n7. Testando sess√£o inv√°lida...")
    try:
        response = requests.post(
            f"{BASE_URL}/upload-mobile/invalid-session",
            json=valid_file_data
        )
        if response.status_code == 404:
            print("‚úÖ Sess√£o inv√°lida bloqueada")
        else:
            print(f"‚ùå Sess√£o inv√°lida aceita: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro no teste de sess√£o inv√°lida: {e}")
    
    # Teste 8: Verificar status
    print("\n8. Testando verifica√ß√£o de status...")
    try:
        response = requests.get(f"{BASE_URL}/upload-status/{session_id}")
        if response.status_code in [200, 404]:
            print("‚úÖ Verifica√ß√£o de status funcionando")
        else:
            print(f"‚ùå Erro na verifica√ß√£o de status: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o de status: {e}")
    
    print("\n" + "=" * 50)
    print("üéâ Testes de seguran√ßa conclu√≠dos!")

def test_session_expiration():
    """Testa expira√ß√£o de sess√£o"""
    print("\n‚è∞ Testando expira√ß√£o de sess√£o...")
    
    # Criar sess√£o
    response = requests.post(f"{BASE_URL}/create-upload-session")
    if response.status_code == 200:
        session_data = response.json()
        session_id = session_data["session_id"]
        print(f"Sess√£o criada: {session_id[:8]}...")
        
        # Aguardar expira√ß√£o (6 minutos)
        print("Aguardando expira√ß√£o da sess√£o (6 minutos)...")
        print("‚ö†Ô∏è Este teste demora 6 minutos. Pressione Ctrl+C para cancelar.")
        
        try:
            time.sleep(360)  # 6 minutos
        except KeyboardInterrupt:
            print("\nTeste de expira√ß√£o cancelado pelo usu√°rio")
            return
        
        # Tentar usar sess√£o expirada
        valid_file_data = {
            "fileName": "test.pdf",
            "fileType": "application/pdf",
            "fileData": "data:application/pdf;base64,dGVzdA=="
        }
        
        response = requests.post(
            f"{BASE_URL}/upload-mobile/{session_id}",
            json=valid_file_data
        )
        
        if response.status_code == 404:
            print("‚úÖ Sess√£o expirada corretamente bloqueada")
        else:
            print(f"‚ùå Sess√£o expirada ainda v√°lida: {response.status_code}")

if __name__ == "__main__":
    print("üß™ Iniciando Testes de Seguran√ßa do Upload")
    print("Certifique-se de que o servidor est√° rodando em", BASE_URL)
    print()
    
    # Testes b√°sicos
    test_secure_upload()
    
    # Perguntar se quer testar expira√ß√£o
    try:
        test_expiration = input("\nDeseja testar expira√ß√£o de sess√£o? (s/N): ").lower()
        if test_expiration == 's':
            test_session_expiration()
    except KeyboardInterrupt:
        print("\nTestes cancelados pelo usu√°rio")
    
    print("\n‚úÖ Todos os testes conclu√≠dos!")



