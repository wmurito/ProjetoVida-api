"""
üß™ Testes de Seguran√ßa - API ProjetoVida
Testes automatizados para verificar vulnerabilidades de seguran√ßa
"""

import pytest
import requests
import json
from fastapi.testclient import TestClient
from unittest.mock import patch, MagicMock

# Importar a aplica√ß√£o
from main import app

client = TestClient(app)

class TestSecurity:
    """Testes de seguran√ßa da API"""
    
    def test_cors_headers(self):
        """Testa se os headers CORS est√£o configurados corretamente"""
        response = client.options("/")
        
        # Verificar headers CORS
        assert "access-control-allow-origin" in response.headers
        assert "access-control-allow-methods" in response.headers
        assert "access-control-allow-headers" in response.headers
    
    def test_security_headers(self):
        """Testa se os headers de seguran√ßa est√£o presentes"""
        response = client.get("/")
        
        # Headers de seguran√ßa obrigat√≥rios
        security_headers = [
            "x-content-type-options",
            "x-frame-options", 
            "x-xss-protection",
            "referrer-policy"
        ]
        
        for header in security_headers:
            assert header in response.headers, f"Header {header} n√£o encontrado"
    
    def test_no_sensitive_data_in_logs(self):
        """Testa se dados sens√≠veis n√£o s√£o expostos em logs"""
        # Mock do logger para capturar logs
        with patch('main.logger') as mock_logger:
            # Fazer requisi√ß√£o com token
            headers = {"Authorization": "Bearer fake-token-12345"}
            client.get("/auth/test", headers=headers)
            
            # Verificar se o token n√£o foi logado
            log_calls = [call[0][0] for call in mock_logger.info.call_args_list]
            
            for log in log_calls:
                assert "fake-token-12345" not in log, "Token exposto em logs"
                assert "Bearer fake-token-12345" not in log, "Token completo exposto em logs"
    
    def test_rate_limiting(self):
        """Testa se o rate limiting est√° funcionando"""
        # Fazer m√∫ltiplas requisi√ß√µes rapidamente
        for i in range(15):  # Mais que o limite
            response = client.get("/")
            
            # Se rate limiting estiver ativo, deve retornar 429
            if response.status_code == 429:
                assert True, "Rate limiting funcionando"
                return
        
        # Se chegou aqui, rate limiting n√£o est√° ativo
        pytest.skip("Rate limiting n√£o implementado")
    
    def test_sql_injection_protection(self):
        """Testa prote√ß√£o contra SQL injection"""
        # Tentar SQL injection em par√¢metros
        malicious_inputs = [
            "'; DROP TABLE paciente; --",
            "1' OR '1'='1",
            "1; DELETE FROM paciente; --",
            "1' UNION SELECT * FROM paciente --"
        ]
        
        for malicious_input in malicious_inputs:
            response = client.get(f"/pacientes/{malicious_input}")
            
            # Deve retornar erro 404 ou 422, n√£o 500
            assert response.status_code in [404, 422], f"SQL injection poss√≠vel: {malicious_input}"
    
    def test_xss_protection(self):
        """Testa prote√ß√£o contra XSS"""
        # Tentar XSS em par√¢metros
        xss_payloads = [
            "<script>alert('xss')</script>",
            "javascript:alert('xss')",
            "<img src=x onerror=alert('xss')>",
            "';alert('xss');//"
        ]
        
        for payload in xss_payloads:
            response = client.get(f"/pacientes/{payload}")
            
            # Verificar se o payload n√£o √© retornado no response
            assert payload not in response.text, f"XSS poss√≠vel: {payload}"
    
    def test_file_upload_validation(self):
        """Testa valida√ß√£o de upload de arquivos"""
        # Tentar upload de arquivo malicioso
        malicious_file = {
            "fileName": "../../../etc/passwd",
            "fileType": "text/plain",
            "fileData": "dGVzdA=="  # base64 de "test"
        }
        
        response = client.post("/upload-mobile/test-session", json=malicious_file)
        
        # Deve rejeitar arquivo com path traversal
        assert response.status_code == 422, "Path traversal n√£o bloqueado"
    
    def test_authentication_required(self):
        """Testa se rotas protegidas requerem autentica√ß√£o"""
        protected_routes = [
            "/pacientes/",
            "/pacientes/1",
            "/dashboard/estadiamento"
        ]
        
        for route in protected_routes:
            response = client.get(route)
            
            # Deve retornar 401 ou 403 sem token
            assert response.status_code in [401, 403], f"Rota {route} n√£o protegida"
    
    def test_token_validation(self):
        """Testa valida√ß√£o de tokens"""
        # Token inv√°lido
        invalid_tokens = [
            "invalid-token",
            "Bearer invalid-token",
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.invalid",
            ""
        ]
        
        for token in invalid_tokens:
            headers = {"Authorization": token}
            response = client.get("/auth/me", headers=headers)
            
            # Deve rejeitar token inv√°lido
            assert response.status_code == 401, f"Token inv√°lido aceito: {token}"
    
    def test_input_validation(self):
        """Testa valida√ß√£o de entrada de dados"""
        # Dados inv√°lidos para cria√ß√£o de paciente
        invalid_patient = {
            "nome_completo": "",  # Nome vazio
            "idade": -1,  # Idade negativa
            "email": "invalid-email",  # Email inv√°lido
            "telefone": "abc"  # Telefone inv√°lido
        }
        
        # Mock de autentica√ß√£o para testar valida√ß√£o
        with patch('main.get_current_user') as mock_auth:
            mock_auth.return_value = {"username": "test"}
            
            response = client.post("/pacientes/", json=invalid_patient)
            
            # Deve rejeitar dados inv√°lidos
            assert response.status_code == 422, "Dados inv√°lidos aceitos"
    
    def test_error_handling(self):
        """Testa se erros n√£o exp√µem informa√ß√µes sens√≠veis"""
        # Tentar acessar recurso inexistente
        response = client.get("/pacientes/999999")
        
        # Verificar se n√£o exp√µe stack trace
        response_text = response.text.lower()
        sensitive_info = [
            "traceback",
            "file",
            "line",
            "exception",
            "error in",
            "python"
        ]
        
        for info in sensitive_info:
            assert info not in response_text, f"Informa√ß√£o sens√≠vel exposta: {info}"

class TestDataProtection:
    """Testes de prote√ß√£o de dados"""
    
    def test_patient_data_encryption(self):
        """Testa se dados sens√≠veis s√£o protegidos"""
        # Este teste seria implementado se houvesse criptografia
        # Por enquanto, apenas verifica se dados n√£o s√£o expostos em logs
        pass
    
    def test_pii_handling(self):
        """Testa tratamento de informa√ß√µes pessoais"""
        # Verificar se PII n√£o √© logado
        with patch('main.logger') as mock_logger:
            # Simular opera√ß√£o com dados pessoais
            patient_data = {
                "nome_completo": "Jo√£o Silva",
                "cpf": "123.456.789-00",
                "telefone": "(11) 99999-9999"
            }
            
            # Fazer requisi√ß√£o (mock de auth)
            with patch('main.get_current_user') as mock_auth:
                mock_auth.return_value = {"username": "test"}
                client.post("/pacientes/", json=patient_data)
            
            # Verificar se PII n√£o foi logado
            log_calls = [call[0][0] for call in mock_logger.info.call_args_list]
            
            for log in log_calls:
                assert "123.456.789-00" not in log, "CPF exposto em logs"
                assert "(11) 99999-9999" not in log, "Telefone exposto em logs"

# Configura√ß√£o do pytest
@pytest.fixture(scope="session")
def test_client():
    """Cliente de teste para a API"""
    return TestClient(app)

# Comandos para executar os testes:
# pytest security_tests.py -v
# pytest security_tests.py::TestSecurity -v
# pytest security_tests.py::TestDataProtection -v
