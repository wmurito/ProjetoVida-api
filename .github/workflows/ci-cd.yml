name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: 🧪 Run tests
      run: |
        python -m pytest --cov=. --cov-report=xml --cov-report=html || true
    
    - name: 📊 Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ github.run_number }}
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'ProjetoVida-ui/package-lock.json'
    
    - name: 📦 Install dependencies
      working-directory: ./ProjetoVida-ui
      run: npm ci
    
    - name: 🔍 Run linting
      working-directory: ./ProjetoVida-ui
      run: npm run lint || true
    
    - name: 🏗️ Build application
      working-directory: ./ProjetoVida-ui
      run: npm run build
    
    - name: 📊 Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-build-${{ github.run_number }}
        path: ProjetoVida-ui/dist/
        retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🚀 Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: serverless deploy --stage staging

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🚀 Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: serverless deploy --stage production
