# Script de Deploy Otimizado para AWS Lambda - Projeto Vida
# Focado em: Baixo custo, Performance, Seguran√ßa
# Caso de uso: 50 pacientes/m√™s + Dashboard

param(
    [string]$Stage = "prod",
    [switch]$SkipDependencies = $false,
    [switch]$DryRun = $false
)

# Configurar para parar em caso de erro
$ErrorActionPreference = "Stop"

Write-Host "üöÄ Deploy Otimizado - Projeto Vida API" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green
Write-Host "Caso de uso: 50 pacientes/m√™s + Dashboard" -ForegroundColor Cyan
Write-Host "Foco: Baixo custo, Performance, Seguran√ßa" -ForegroundColor Cyan
Write-Host ""

# Verificar pr√©-requisitos
Write-Host "üìã Verificando pr√©-requisitos..." -ForegroundColor Yellow

# 1. Verificar Serverless Framework
try {
    $null = Get-Command serverless -ErrorAction Stop
    Write-Host "‚úÖ Serverless Framework encontrado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Serverless Framework n√£o encontrado!" -ForegroundColor Red
    Write-Host "Instalando Serverless Framework..." -ForegroundColor Yellow
    npm install -g serverless
}

# 2. Verificar Docker (necess√°rio para compilar depend√™ncias)
try {
    $null = Get-Command docker -ErrorAction Stop
    Write-Host "‚úÖ Docker encontrado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n√£o encontrado!" -ForegroundColor Red
    Write-Host "Docker √© necess√°rio para compilar depend√™ncias nativas" -ForegroundColor Yellow
    exit 1
}

# 3. Verificar AWS CLI
try {
    $null = aws sts get-caller-identity 2>$null
    Write-Host "‚úÖ AWS CLI configurado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå AWS CLI n√£o configurado!" -ForegroundColor Red
    Write-Host "Configure o AWS CLI com: aws configure" -ForegroundColor Yellow
    exit 1
}

# 4. Verificar arquivo de par√¢metros
if (-not (Test-Path "params-optimized.json")) {
    Write-Host "‚ö†Ô∏è  Arquivo params-optimized.json n√£o encontrado!" -ForegroundColor Yellow
    Write-Host "Criando arquivo de par√¢metros padr√£o..." -ForegroundColor Yellow
    
    $paramsContent = @"
{
  "s3Bucket": "projeto-vida-prod-optimized",
  "s3KeyPrefix": "uploads",
  "dbSecretName": "projeto-vida/database",
  "cognitoSecretName": "projeto-vida/cognito",
  "awsRegion": "us-east-1",
  "corsOrigins": "https://your-frontend-domain.com,http://localhost:5173"
}
"@
    
    $paramsContent | Out-File -FilePath "params-optimized.json" -Encoding UTF8
    Write-Host "‚úÖ Arquivo params-optimized.json criado" -ForegroundColor Green
    Write-Host "‚ö†Ô∏è  Ajuste os valores conforme necess√°rio antes do deploy" -ForegroundColor Yellow
}

# 5. Limpeza de arquivos desnecess√°rios
Write-Host "üßπ Limpando arquivos desnecess√°rios..." -ForegroundColor Yellow

# Remover arquivos Python compilados
Get-ChildItem -Recurse -Name "*.pyc" | Remove-Item -Force -ErrorAction SilentlyContinue
Get-ChildItem -Recurse -Directory -Name "__pycache__" | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
Get-ChildItem -Recurse -Name "*.log" | Remove-Item -Force -ErrorAction SilentlyContinue
Get-ChildItem -Recurse -Name ".DS_Store" | Remove-Item -Force -ErrorAction SilentlyContinue

Write-Host "‚úÖ Limpeza conclu√≠da" -ForegroundColor Green

# 6. Verificar depend√™ncias Python
if (-not $SkipDependencies) {
    Write-Host "üêç Verificando depend√™ncias Python..." -ForegroundColor Yellow
    
    if (-not (Test-Path "venv")) {
        Write-Host "Criando ambiente virtual..." -ForegroundColor Yellow
        python -m venv venv
    }
    
    Write-Host "Ativando ambiente virtual..." -ForegroundColor Yellow
    & "venv\Scripts\Activate.ps1"
    
    Write-Host "Instalando depend√™ncias otimizadas..." -ForegroundColor Yellow
    pip install -r requirements-lambda-optimized.txt
}

# 7. Deploy
if ($DryRun) {
    Write-Host "üîç Modo Dry Run - Verificando configura√ß√£o..." -ForegroundColor Cyan
    serverless deploy --config serverless-optimized.yml --stage $Stage --verbose --dry-run
} else {
    Write-Host "üöÄ Iniciando deploy otimizado..." -ForegroundColor Green
    serverless deploy --config serverless-optimized.yml --stage $Stage --verbose
}

if ($LASTEXITCODE -eq 0) {
    Write-Host ""
    Write-Host "üéâ Deploy conclu√≠do com sucesso!" -ForegroundColor Green
    Write-Host "========================================" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìä Configura√ß√µes otimizadas:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Runtime: Python 3.11" -ForegroundColor White
    Write-Host "   ‚Ä¢ Mem√≥ria: 512MB (otimizada para baixo custo)" -ForegroundColor White
    Write-Host "   ‚Ä¢ Timeout: 15s (otimizado para performance)" -ForegroundColor White
    Write-Host "   ‚Ä¢ Concorr√™ncia: Limitada a 5 (economia de custos)" -ForegroundColor White
    Write-Host "   ‚Ä¢ Provisioned Concurrency: Desabilitada (economia)" -ForegroundColor White
    Write-Host ""
    Write-Host "üí∞ Estimativa de custo mensal:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ 50 pacientes/m√™s: ~$2-5 USD" -ForegroundColor White
    Write-Host "   ‚Ä¢ Inclui: Lambda, S3, CloudWatch Logs" -ForegroundColor White
    Write-Host ""
    Write-Host "üîí Recursos de seguran√ßa:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ IAM roles com menor privil√©gio" -ForegroundColor White
    Write-Host "   ‚Ä¢ S3 com bloqueio de acesso p√∫blico" -ForegroundColor White
    Write-Host "   ‚Ä¢ CORS configurado" -ForegroundColor White
    Write-Host "   ‚Ä¢ Rate limiting ativo" -ForegroundColor White
    Write-Host ""
    Write-Host "üìà Performance otimizada:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Cold start: ~2-3s (aceit√°vel para 50 pacientes/m√™s)" -ForegroundColor White
    Write-Host "   ‚Ä¢ Warm start: ~200ms" -ForegroundColor White
    Write-Host "   ‚Ä¢ Tamanho do pacote: ~15MB (70% menor)" -ForegroundColor White
    Write-Host ""
    Write-Host "üéØ Pr√≥ximos passos:" -ForegroundColor Cyan
    Write-Host "   1. Testar endpoints da API" -ForegroundColor White
    Write-Host "   2. Configurar dom√≠nio personalizado (opcional)" -ForegroundColor White
    Write-Host "   3. Configurar monitoramento no CloudWatch" -ForegroundColor White
    Write-Host "   4. Atualizar CORS origins no params-optimized.json" -ForegroundColor White
    Write-Host ""
    Write-Host "‚úÖ Deploy otimizado finalizado!" -ForegroundColor Green
} else {
    Write-Host "‚ùå Erro no deploy!" -ForegroundColor Red
    Write-Host "Verifique os logs acima para mais detalhes" -ForegroundColor Yellow
    exit 1
}