service: projeto-vida-dados

frameworkVersion: '4'

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  memorySize: 512
  timeout: 30
  vpc:
    securityGroupIds:
      - ${param:securityGroupId}
    subnetIds:
      - ${param:subnetId1}
      - ${param:subnetId2}
  environment:
    S3_BUCKET: ${param:s3Bucket, 'projeto-vida-prd'}
    S3_KEY_PREFIX: ${param:s3KeyPrefix, 'dashboard_files'}
    DB_SECRET_NAME: ${param:dbSecretName, 'projeto-vida/database'}
    COGNITO_SECRET_NAME: ${param:cognitoSecretName, 'projeto-vida/cognito'}
  iam:
    role:
      statements:
        # Permiss천es para S3
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"
        
        # Permiss천es para Secrets Manager
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: 
            - "arn:aws:secretsmanager:${self:provider.region}:*:secret:${self:provider.environment.DB_SECRET_NAME}*"
            - "arn:aws:secretsmanager:${self:provider.region}:*:secret:${self:provider.environment.COGNITO_SECRET_NAME}*"
        
        # Permiss천es para CloudWatch Logs
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/*"
        
        # Permiss천es para VPC (acesso ao RDS)
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:AssignPrivateIpAddresses
            - ec2:UnassignPrivateIpAddresses
          Resource: "*"

functions:
  api:
    handler: main.handler
    events:
      - httpApi: '*'
  
  dashboard:
    handler: lambda_dashboard.lambda_handler
    events:
      - schedule: rate(1 day)

plugins:
  - serverless-python-requirements

package:
  individually: false
  patterns:
    - '!.venv/**'
    - '!.venv-new/**'
    - '!node_modules/**'
    - '!.git/**'
    - '!.pytest_cache/**'
    - '!__pycache__/**'
    - '!*.pyc'
    - '!.env'
    - '!tests/**'

custom:
  pythonRequirements:
    fileName: requirements-lambda.txt
    dockerizePip: true
    dockerImage: public.ecr.aws/sam/build-python3.9:latest
    slim: true
    strip: false
    useDownloadCache: false
    useStaticCache: false
    noDeploy:
      - boto3
      - botocore
      - awscli